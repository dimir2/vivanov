task 1001

«Order book» task
Задание "Книга заявок"


Before you start
Прежде, чем вы начнете

Please follow these instructions super accurately.
Пожалуйста, точно следуйте этим инстркциям: 
* Develop the solution in Java (you can use Maven as a build tool if you want)
* Разработайте решение на языке Java (вы можете использовать Maven в качестве билд системы, если хотите)
* The core of the solution should be written without any add-ons to the core of the programming language. Use only the defined language standard (e.g. you can use all features that you find in a standard JDK). This means that you can use external libraries, but your program should still produce the required output after removing those parts. For example, if you would decide to use a logging library then your program would still work correctly after removing all parts that use the logging library. You can also use JUnit.
* Ядро решения должно быть написано на чистом языке Java, без использования каких либо дополнительных библиотек. Используйте только стандартные языковые возможности (то есть вы можете использовать все возможности, которые найдете в стадартном JDK). Это означает, что вы можете использовать сторонние библиотеки, но вывод вашей программы должен оставаться тем же самым, после их удаления. Например, если вы решите воспользоваться библиотекой логгирования, то ваша программа должна работать корректно после удаления кода, использующего эту библиотеку. Так же вы можете использовать JUnit.
* Optimize for quality of development and execution speed.
* Оптимизируйте ваше решение для достижения лучшего качества и скорости работы.
  - In general execution time on PC with HDD should be around 6 seconds.
  - В среднем, время выполнения на ПК с жестким диском должно быть около 6 секунд.
  - Be ready to explain and protect all performance optimizations (if there will be any).
  - Будьте готовы объяснять и доказывать необходимость всех изменений, направленных на улучшение производительноси (если такие будут).  
* Deliver your result in the best professional quality you can produce. Polish your solution. Make a master piece out of it.  It is part of this task to compare what different people consider to be a professional quality solution.
* Предоставьте как можно более профессиональное решение. Отполируйте его. Сделайте из него произведение искусства. Это является частью задания - сравнить, какое решение разные люди считают наиболее профессиональным. 

Task Description
Описание задания

Program should create Order Books according to orders from XML file: https://yadi.sk/d/cciS7Dqy35uQjU
Программа должна создавать книги заявок на основе заявок из XML файла: https://yadi.sk/d/cciS7Dqy35uQjU

Two actions supported: new order, delete exiting order. And after processing the whole file, print to standard output all order books generated.
Поддерживаются два действия: новая заявка, удаление существующей заявки. И после обработки всего файла, печать всех сгенерированных книг заявок на стандартный вывод.

What is Order Book?
Что такое книга заявок (биржевой стакан)?

Order Book is basically a combination of bid ladder and ask ladder. Bid ladder consists from buy orders; ask ladder consists from sell orders. See example order book and format of output for your program:
Проще говоря, книга заявок - это комбинация лестниц (ступеней) заявок на покупку и продажу. Ознакомьтесь с примером книги заявок и с форматом вывода вашей программы:  

Order book: ${order_book_name}

    BID             ASK
Volume@Price – Volume@Price
    10@100.1 –     11@100.2
     4@100.0 –     14@100.21
    98@99.98 –     14@100.23
    -------- –     12@101.00

Bid ladder is sorted from the highest bid price at the top to lowest price at the bottom.
Лестница заявок на покупку отсортирована от наибольшей цены сверху, до наименьшей цены внизу.

Ask ladder – visa versa, sorted from lowest at the top to highest price at the bottom.
Лестница заявок на продажу - наоборот - от наименьшей цены на верху до наибольшей цены внизу.

Note: when printing out resulted order books - quantity for all orders with the same price should be aggregated. In other words – on each side (bid / ask) of order book can have only one level with particular price.
Примечание: при выводе на печать результирующих книг заявок, количество всех заявок с одинаковой ценой должно быть просуммировано (агрегировано). Другими словами, с каждой стороны (покупка / продажа) заявки, книга должна иметь только один уровень с определенной ценой.

Note: You don’t need to check XML file for correctness and implement any safety checks.
Примечание: У вас нет необходимости как либо проверять XML файл на корректность и реализовывать какие либо иные проверки.
  
Note: There are several different order books in XML file (see ‘book’ attribute)
Примечание: XML файл содержит несколько разных книг заявок (смотри аттрибут 'book')

Matching logic:
Логика совпадений:

When new bid/ask order is added into order book you should check opposite book side for matching. Checking always starts from the top of opposite side. To get execution (matching) price of counter orders must overlap (bid>=ask). For example:
При добавлении в книгу заявок новой заявки на покупку/продажу, вы должны проверить противоположную сторону книги на совпадение. Проверка всегда осуществляется с верха противоположной стороны. Чтобы получить совпадение (исполнение заявки), цена встречных заявок должна перекрываться (покупка >= продажа). Например:

bid order at 4.4 matches ask order at 4.3
заявка на покупку за 4.4 совпадает с заявкой на продажу за 4.3 (цена)
ask order at 3.7 matches bid order at 3.8
заявка на продажу за 3.7 совпадает в заявкой на покупку за 3.8 (цена)
opposite side orders with same price matches as well.
заявки с противоположной стороны с одинаковой ценой также совпадают.

Matching is a process of execution two counter orders. When orders are matched they current volume is decreased by minimum current volumes of these orders:  volume_executed=min(ask_order,bid_order).  So when there is a match you need to adjust orders quantities. There could be three cases:
Совпадение это процесс исполнения двух встречных заявок. Когда заявки совпадают, их текущий объем уменьшается на минимальный текущий объем этих заявок:  volume_executed=min(ask_order,bid_order). Таким образом, если произошло исполнение заявки (совпадение), вы должны изменить объемы заявок. Тут может быть три возможных варианта:

Order existing in order book fully filled by incoming order a remove existing, adjust quantity of incoming order and add it
Заявка, существующая в книге заявок, полностью покрывается входящей заявкой - удалить существующую, соответственно изменить объем входящей заявки, добавить ее.

Incoming order fully filled by existing order - adjust quantity of existing order
Входящая заявки полностью закрывается существующей заявкой - соответственно изменить объем существующей заявки

Full quantity match a Remove existing order
Объемы заявок полностью совпадают - удалить существующую заявку. 

Also
Также

Describe do’s and don’ts of your solution, what could be done to speed it up further, improve, simplify?
Опишите плюсы и минусы вашего решения, что могло бы быть сделано для дальнейшего увеличения скорости работы, что улучшено, что упрощено?
